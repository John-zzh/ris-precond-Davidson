if __name__ == '__main__':
    from pyscf import gto
    from pyscf import dft
    from pyscf import tddft, grad
    import time

    scf_start = time.time()
    mol = gto.Mole()
    mol.verbose = 5
    # mol.output = None

    # mol.atom = [
    #     ['H' , (0. , 0. , 1.804)],
    #     ['F' , (0. , 0. , 0.)], ]

#     mol.atom = 'O     8.5968128   -1.3411867    0.7672090; \
# C    -4.5314857    0.8400050    0.3958530; \
# C    -5.9128179    0.1429919    0.3874051; \
# C    -5.8377863   -1.3073696    0.8597039; \
# C    -3.4343597   -0.0843938   -0.1849537; \
# C    -4.9606546   -2.1005454   -0.1078383; \
# C    -3.6604307   -1.4080028   -0.4590819; \
# C    -4.1400023    1.2305740    1.8418364; \
# C    -4.6643161    2.1320103   -0.4468703; \
# C    -2.1393507    0.5646111   -0.4129839; \
# C    -2.6819549   -2.3073791   -1.1777490; \
# C    -0.9059414    0.0288990   -0.1647418; \
# C     0.3626677    0.6937903   -0.3863228; \
# C     0.3603674    2.0882357   -0.9648577; \
# C     1.5215728    0.0155649   -0.0571149; \
# C     2.8681744    0.4794936   -0.1976334; \
# C     3.9679686   -0.2663766    0.1539278; \
# C     5.3481806    0.1507307    0.0321340; \
# C     5.6379731    1.5265970   -0.5272597; \
# C     6.3346255   -0.7259854    0.4314495; \
# C     7.7761894   -0.5072257    0.3928673; \
# H    -6.3152755    0.1598725   -0.6444430; \
# H    -6.6111234    0.7321523    1.0100802; \
# H    -6.8458709   -1.7542946    0.9208320; \
# H    -5.4068913   -1.3524213    1.8773517; \
# H    -5.5176563   -2.3039658   -1.0475881; \
# H    -4.7227636   -3.1005087    0.3062201; \
# H    -4.8722208    1.9434265    2.2631239; \
# H    -4.0986158    0.3449417    2.4989089; \
# H    -3.1432155    1.7049635    1.8611112; \
# H    -5.5379328    2.7101340   -0.0963470; \
# H    -3.7817615    2.7878254   -0.3561436; \
# H    -4.8154722    1.8951861   -1.5147914; \
# H    -2.1770352    1.6060271   -0.7550856; \
# H    -2.1719412   -2.9949724   -0.4746589; \
# H    -1.9086100   -1.7467583   -1.7247560; \
# H    -3.2296395   -2.9486965   -1.8942036; \
# H    -0.8438198   -0.9789744    0.2633084; \
# H     1.3741834    2.4957105   -1.0880546; \
# H    -0.2055160    2.7785463   -0.3125989; \
# H    -0.1352256    2.1000146   -1.9524665; \
# H     1.4016997   -0.9950187    0.3576223; \
# H     3.0237219    1.4834929   -0.6091687; \
# H     3.8028003   -1.2712501    0.5652604; \
# H     5.1592258    2.3035534    0.0954705; \
# H     5.2208960    1.6233746   -1.5457633; \
# H     6.7135816    1.7442957   -0.5770871; \
# H     6.0405140   -1.7069492    0.8269293; \
# H     8.1238322    0.4835550   -0.0041409'
    mol.atom = 'N     1.8568258   -1.8478779    0.0004298; \
                C     1.2264667   -0.6481723    0.0000724; \
                C    -0.1889299   -0.5348452    0.0001429; \
                C    -0.6951103    0.7812120    0.0000651; \
                N    -2.0687049    0.6169371   -0.0000274; \
                C    -2.3104791   -0.7472346   -0.0000132; \
                N    -1.2093060   -1.4726188    0.0001134; \
                H    -3.3283196   -1.1434598   -0.0001232; \
                H    -2.7557449    1.3675183   -0.0001239; \
                N     0.0140292    1.9198674   -0.0000454; \
                C     1.3341839    1.6699395   -0.0000627; \
                N     1.9664833    0.4808639   -0.0000783; \
                H     1.9899118    2.5509519    0.0000149; \
                H     1.3163594   -2.7062203   -0.0018135; \
                H     2.8717558   -1.8734906   -0.0018858'

    # mol.unit = 'B'
    mol.basis = 'def2-SVP'
    mol.max_memory = 8000
    mol.build()
    mol.verbose = 5
    mf = dft.RKS(mol)
    mf.xc = 'pbe0'
    # mf.grids.prune = False
    mf.conv_tol = 1e-10
    mf.grids.level = 4
    mf = mf.density_fit()
    mf.kernel()
    scf_end = time.time()
    scf_time = scf_end - scf_start

    TD_start = time.time()
    td = tddft.TDA(mf)
    td.nstates = 3
    e, z = td.kernel()
    TD_end = time.time()
    TD_time = TD_end - TD_start


    # attrs = vars(td)
    # for key in attrs:
    #     print(key, attrs[key])
    # tdg = td.nuc_grad_method()
    TDG_start = time.time()
    tdg = td.Gradients()
    g1 = tdg.kernel(state=1)
    TDG_end = time.time()
    TDG_time = TDG_end - TDG_start
    print(g1)

    print('scf_time = {:.2f}'.format(scf_time))
    print('TD_time = {:.2f}'.format(TD_time))
    print('TDG_time = {:.2f}'.format(TDG_time))
