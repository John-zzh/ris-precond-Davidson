curpath /Users/zehaozhou/repo/project/davidson/davidson/RHS_maker
lib.num_threads() =  1
Namespace(basis_set='def2-tzvp', checkfile=True, density_fit=True, functional='pbe0', grad=True, grid_level=3, memory=4000, method='RKS', verbose=5, xyzfile='methanol.xyz')
svmem(total=8589934592, available=1955672064, percent=77.2, used=5042827264, free=16703488, active=1945628672, inactive=1916747776, wired=3097198592)
at beginning memory used: 43.8828125 MB
mol.max_memory 4000
#INFO: **** input file is /Users/zehaozhou/repo/project/davidson/davidson/RHS_maker/PySCF_grad.py ****
import time
import pyscf
import tempfile
from pyscf import lib, gto, scf, dft, tddft, grad
import argparse
import os
import psutil

import numpy

def str2bool(str):
    if str.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif str.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError('Unsupported value encountered.')

print('curpath', os.getcwd())
print('lib.num_threads() = ', lib.num_threads())

parser = argparse.ArgumentParser(description='Davidson')
parser.add_argument('-x', '--xyzfile',                      type=str,   default='NA', help='xyz filename (molecule.xyz)')
parser.add_argument('-chk', '--checkfile',                  type=str2bool,  default=True, help='checkpoint filename (.chk)')
parser.add_argument('-m', '--method',                       type=str,   default='RKS', help='RHF RKS UHF UKS')
parser.add_argument('-f', '--functional',                   type=str,   default=None,  help='xc functional')
parser.add_argument('-b', '--basis_set',                    type=str,   default='def2-TZVP',  help='basis set')
parser.add_argument('-df', '--density_fit',                 type=str2bool,  default='True', help='density fitting turn on')
parser.add_argument('-g', '--grid_level',                   type=int,   default=3,   help='0-9, 9 is best')

parser.add_argument('-M',  '--memory',                      type=int,   default= 4000, help='max_memory')
parser.add_argument('-v',  '--verbose',                     type=int,   default= 5,    help='mol.verbose = 3,4,5')
parser.add_argument('-grad',  '--grad',                     type=str2bool,   default= 'False', help='perform S1 grad calculation')

args = parser.parse_args()
################################################

print(args)




########################################################
def show_memory_info(hint):
    pid = os.getpid()
    p = psutil.Process(pid)
    info = p.memory_full_info()
    memory = info.uss / 1024 / 1024
    print('{} memory used: {} MB'.format(hint, memory))
########################################################

info = psutil.virtual_memory()
print(info)

show_memory_info('at beginning')

# read xyz file and delete its first two lines
basename = args.xyzfile.split('.',1)[0]

with open(args.xyzfile) as f:
    coordinate = f.read().splitlines()[2:]
    atom_coordinates = [i for i in coordinate if i != '']
###########################################################################
# build geometry in PySCF
mol = gto.Mole()
mol.atom = atom_coordinates
mol.basis = args.basis_set
mol.verbose = args.verbose
mol.max_memory = args.memory
print('mol.max_memory', mol.max_memory)
mol.build(parse_arg = False)
###########################################################################
###################################################
#DFT or HF?
if args.method == 'RKS':
    mf = dft.RKS(mol)
elif args.method == 'UKS':
    mf = dft.UKS(mol)
elif args.method == 'RHF':
    mf = scf.RHF(mol)
elif args.method == 'UHF':
    mf = scf.UHF(mol)

if 'KS' in args.method:
    print('RKS')
    mf.xc = args.functional
    mf.grids.level = args.grid_level
    # 0-9, big number for large mesh grids, default is 3
else:
    print('HF')

if args.density_fit:
    mf = mf.density_fit()
    print('Density fitting turned on')

if args.checkfile:
    mf.chkfile = basename + '_' + args.functional + '.chk'
    mf.init_guess = 'chkfile'

mf.conv_tol = 1e-10

#
# Save the density matrix as the initial guess for the next calculation
#



# mf.init_guess = 'chkfile' # to use the chk file as input


print ('Molecule built')
print ('Calculating SCF Energy...')
kernel_0 = time.time()
mf.kernel()
kernel_1 = time.time()
scf_time = kernel_1 - kernel_0
print ('SCF Done after ', round(scf_time, 4), 'seconds')

show_memory_info('after SCF')

if args.grad:
    TD_start = time.time()
    td = tddft.TDA(mf)
    td.nstates = 3
    e, z = td.kernel()
    # z = numpy.array(z)
    X = z[0][0]
    X = numpy.array(X)
    print('X.shape',X.shape)
    print('e.shape',' z.shape')
    print(len(e), type(z[0][0]))
    # print(z)

    TD_end = time.time()
    TD_time = TD_end - TD_start

    # z = grad_elec(mf, (X, numpy.zeros_like(X)))
    # attrs = vars(td)
    # for key in attrs:
    #     print(key, attrs[key])
    # tdg = td.nuc_grad_method()
    TDG_start = time.time()
    tdg = td.Gradients(cphf_max_cycle=40)
    g1 = tdg.kernel(state=1)
    TDG_end = time.time()
    TDG_time = TDG_end - TDG_start
    print(g1)

    print('scf_time = {:.2f}'.format(scf_time))
    print('TD_time = {:.2f}'.format(TD_time))
    print('TDG_time = {:.2f}'.format(TDG_time))
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Quantum', release='22.3.0', version='Darwin Kernel Version 22.3.0: Mon Jan 30 20:42:11 PST 2023; root:xnu-8792.81.3~2/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.4 (default, Aug 13 2019, 15:17:50) 
[Clang 4.0.1 (tags/RELEASE_401/final)]
numpy 1.21.4  scipy 1.1.0
Date: Fri Mar 10 22:13:42 2023
PySCF version 2.1.1
PySCF path  /Users/zehaozhou/repo/project/pyscf
GIT HEAD (branch master) 8b3fef8cf18f10d430261d4a8bea21fadf19bb1f

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 6
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 C     -4.891260000000   3.297700000000   0.000290000000 AA   -9.243141804040   6.231749840978   0.000548020576 Bohr   0.0
[INPUT]  2 H     -5.282130000000   3.054940000000  -1.011610000000 AA   -9.981779054349   5.772999926979  -1.911665844871 Bohr   0.0
[INPUT]  3 O     -3.493070000000   3.284290000000  -0.003280000000 AA   -6.600945633934   6.206408613648  -0.006198301689 Bohr   0.0
[INPUT]  4 H     -5.282130000000   2.583740000000   0.757360000000 AA   -9.981779054349   4.882560977084   1.431202977701 Bohr   0.0
[INPUT]  5 H     -5.239980000000   4.315400000000   0.271380000000 AA   -9.902127098198   8.154924117948   0.512833875684 Bohr   0.0
[INPUT]  6 H     -3.229590000000   2.359810000000  -0.249530000000 AA   -6.103040594634   4.459394606010  -0.471543359863 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [3    /1   ]  34.061341         0.0060251978
                                5.1235746         0.045021094
                                1.1646626         0.20189726
[INPUT] 0    0    [1    /1   ]  0.32723041           1
[INPUT] 0    0    [1    /1   ]  0.10307241           1
[INPUT] 1    0    [1    /1   ]  0.8                  1
[INPUT] C
[INPUT] 0    0    [6    /1   ]  13575.349682      0.00022245814352
                                2035.233368       0.0017232738252
                                463.22562359      0.0089255715314
                                131.20019598      0.035727984502
                                42.853015891      0.11076259931
                                15.584185766      0.24295627626
[INPUT] 0    0    [2    /1   ]  6.2067138508      0.41440263448
                                2.5764896527      0.23744968655
[INPUT] 0    0    [1    /1   ]  0.57696339419        1
[INPUT] 0    0    [1    /1   ]  0.22972831358        1
[INPUT] 0    0    [1    /1   ]  0.095164440028       1
[INPUT] 1    0    [4    /1   ]  34.697232244      0.0053333657805
                                7.9582622826      0.035864109092
                                2.3780826883      0.14215873329
                                0.81433208183     0.34270471845
[INPUT] 1    0    [1    /1   ]  0.28887547253        1
[INPUT] 1    0    [1    /1   ]  0.10056823671        1
[INPUT] 2    0    [1    /1   ]  1.097                1
[INPUT] 2    0    [1    /1   ]  0.318                1
[INPUT] 3    0    [1    /1   ]  0.761                1
[INPUT] O
[INPUT] 0    0    [6    /1   ]  27032.382631      0.00021726302465
                                4052.3871392      0.0016838662199
                                922.3272271       0.0087395616265
                                261.24070989      0.035239968808
                                85.354641351      0.11153519115
                                31.035035245      0.25588953961
[INPUT] 0    0    [2    /1   ]  12.260860728      0.39768730901
                                4.9987076005      0.2462784943
[INPUT] 0    0    [1    /1   ]  1.1703108158         1
[INPUT] 0    0    [1    /1   ]  0.46474740994        1
[INPUT] 0    0    [1    /1   ]  0.18504536357        1
[INPUT] 1    0    [4    /1   ]  63.274954801      0.0060685103418
                                14.627049379      0.041912575824
                                4.4501223456      0.16153841088
                                1.5275799647      0.35706951311
[INPUT] 1    0    [1    /1   ]  0.52935117943        1
[INPUT] 1    0    [1    /1   ]  0.1747842127         1
[INPUT] 2    0    [1    /1   ]  2.314                1
[INPUT] 2    0    [1    /1   ]  0.645                1
[INPUT] 3    0    [1    /1   ]  1.428                1

nuclear repulsion = 40.3453758822416
number of shells = 38
number of NR pGTOs = 124
number of NR cGTOs = 86
basis = def2-tzvp
ecp = {}
CPU time:         1.43
RKS
Density fitting turned on
Molecule built
Calculating SCF Energy...


******** <class 'pyscf.df.df_jk.density_fit.<locals>.DensityFitting'> ********
method = DensityFitting-RKS
initial guess = chkfile
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = methanol_pbe0.chk
max_memory 4000 MB (current use 0 MB)
XC library pyscf.dft.libxc version 6.1.0
    S. Lehtola, C. Steigemann, M. J.T. Oliveira, and M. A.L. Marques.,  SoftwareX 7, 1–5 (2018)
XC functionals = pbe0
    C. Adamo and V. Barone.,  J. Chem. Phys. 110, 6158 (1999)
    M. Ernzerhof and G. E. Scuseria.,  J. Chem. Phys. 110, 5029 (1999)
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x7f77d8aea200>
grids dens level: 3
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x7f77d8aea680>
small_rho_cutoff = 1e-07
Set gradient conv threshold to 1e-05
atom C rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  50  86  86  86  86  86  86  86  86  86  86 266 266 266
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
atom H rad-grids = 50, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  86  86  86  86
 266 266 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 266
 266 266 266 266 266 266 266 266 266 266 266 266 266 266]
atom O rad-grids = 75, ang-grids = [ 50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50  50
  50  50  50  50  86  86  86  86  86  86  86  86  86 266 266 266 266 266
 266 266 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302
 302 302 302 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266
 266 266 266]
tot_boxes 1728, boxes in each direction [10 10 10]
Padding 4 grids
tot grids = 68264
Drop grids 9313
prune_by_density_: 1 padding grids
    CPU time for setting up grids      0.65 sec, wall time      0.39 sec
nelec by numeric integration = 18.00000300802857
    CPU time for vxc      1.02 sec, wall time      0.61 sec
******** <class 'pyscf.df.df.DF'> ********
auxbasis = None
max_memory = 4000
_cderi_to_save = /var/folders/yv/2d0zlq3j1dq04l1tjz4qgg800000gn/T/tmpsllu0kkh
Default auxbasis def2-tzvp-jkfit is used for H def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for C def2-tzvp
Default auxbasis def2-tzvp-jkfit is used for O def2-tzvp
num shells = 74, num cGTOs = 224
size of aux basis 224
int3c2e [1/1], AO [0:38], nrow = 3741
    CPU time for cholesky_eri      0.15 sec, wall time      0.07 sec
    CPU time for df vj and vk      0.23 sec, wall time      0.11 sec
E1 = -237.11276212488826  Ecoul = 96.49346649351023  Exc = -15.36120859646231
init E= -115.635128345599
cond(S) = 3910.854145642618
    CPU time for initialize scf      1.92 sec, wall time      1.18 sec
  HOMO = -0.287263104532992  LUMO = 0.0350071563139364
  mo_energy =
[-1.92055454e+01 -1.02629841e+01 -1.04945025e+00 -6.93457181e-01
 -5.20522890e-01 -4.56619608e-01 -4.41343237e-01 -3.47396360e-01
 -2.87263105e-01  3.50071563e-02  8.14316482e-02  1.26744763e-01
  1.27678058e-01  1.46321178e-01  2.30951862e-01  2.34811196e-01
  3.26102805e-01  3.74039465e-01  3.92392287e-01  4.53108645e-01
  4.56862328e-01  4.78418660e-01  5.12212231e-01  5.16834241e-01
  5.84978952e-01  7.00636887e-01  7.34961619e-01  7.85905796e-01
  9.03123967e-01  9.29754440e-01  1.03208511e+00  1.28150915e+00
  1.41177649e+00  1.47039170e+00  1.51544875e+00  1.51916400e+00
  1.54147079e+00  1.57440216e+00  1.60307469e+00  1.69423618e+00
  1.87220830e+00  1.93308608e+00  1.95976806e+00  2.00630663e+00
  2.02318761e+00  2.15848360e+00  2.25732841e+00  2.26465806e+00
  2.29632038e+00  2.30852301e+00  2.40454687e+00  2.48124612e+00
  2.54305627e+00  2.59511866e+00  2.73669918e+00  2.76918993e+00
  2.81288172e+00  2.90352852e+00  3.01347591e+00  3.08587790e+00
  3.20555351e+00  3.31342945e+00  3.33628107e+00  3.37708049e+00
  3.55416808e+00  3.55730089e+00  3.57072314e+00  3.89323351e+00
  4.09288700e+00  4.15883956e+00  4.34888447e+00  4.46269715e+00
  5.27242664e+00  5.36220104e+00  5.44135634e+00  5.72117356e+00
  5.76589781e+00  5.92197783e+00  6.19494144e+00  6.45479548e+00
  6.67077138e+00  6.74444047e+00  6.95120984e+00  7.11486140e+00
  2.23485976e+01  4.36913179e+01]
nelec by numeric integration = 18.000003008047155
    CPU time for vxc      1.01 sec, wall time      0.58 sec
    CPU time for df vj and vk      0.05 sec, wall time      0.02 sec
E1 = -237.11278707872225  Ecoul = 96.49349468927595  Exc = -15.361211838390291
cycle= 1 E= -115.635128345595  delta_E= 3.75e-12  |g|= 6.39e-06  |ddm|= 4.95e-06
    CPU time for cycle= 1      1.07 sec, wall time      0.62 sec
  HOMO = -0.287261217177296  LUMO = 0.0350074387914115
  mo_energy =
[-1.92055386e+01 -1.02629855e+01 -1.04944800e+00 -6.93456975e-01
 -5.20521679e-01 -4.56619355e-01 -4.41342321e-01 -3.47395190e-01
 -2.87261217e-01  3.50074388e-02  8.14316523e-02  1.26744692e-01
  1.27677885e-01  1.46321410e-01  2.30951799e-01  2.34811225e-01
  3.26103288e-01  3.74039542e-01  3.92392802e-01  4.53108555e-01
  4.56862640e-01  4.78418778e-01  5.12213097e-01  5.16834335e-01
  5.84979923e-01  7.00636880e-01  7.34961750e-01  7.85906511e-01
  9.03124103e-01  9.29754343e-01  1.03208512e+00  1.28150986e+00
  1.41177678e+00  1.47039171e+00  1.51544844e+00  1.51916375e+00
  1.54147068e+00  1.57440248e+00  1.60307518e+00  1.69423645e+00
  1.87220919e+00  1.93308636e+00  1.95976813e+00  2.00630723e+00
  2.02318791e+00  2.15848433e+00  2.25732915e+00  2.26465865e+00
  2.29632063e+00  2.30852280e+00  2.40454769e+00  2.48124599e+00
  2.54305615e+00  2.59511953e+00  2.73669959e+00  2.76919102e+00
  2.81288306e+00  2.90352993e+00  3.01347577e+00  3.08587792e+00
  3.20555385e+00  3.31342913e+00  3.33628165e+00  3.37708055e+00
  3.55416826e+00  3.55730083e+00  3.57072306e+00  3.89323483e+00
  4.09288668e+00  4.15883933e+00  4.34888419e+00  4.46269850e+00
  5.27242905e+00  5.36220340e+00  5.44135877e+00  5.72117579e+00
  5.76590012e+00  5.92198003e+00  6.19494424e+00  6.45479903e+00
  6.67077475e+00  6.74444382e+00  6.95121312e+00  7.11486438e+00
  2.23485963e+01  4.36913242e+01]
nelec by numeric integration = 18.000003008018943
    CPU time for vxc      0.99 sec, wall time      0.57 sec
    CPU time for df vj and vk      0.05 sec, wall time      0.02 sec
E1 = -237.1127474666631  Ecoul = 96.49344997840875  Exc = -15.361206739572829
Extra cycle  E= -115.635128345586  delta_E= 9.41e-12  |g|= 9.78e-06  |ddm|= 7.61e-06
    CPU time for scf_cycle      4.03 sec, wall time      2.41 sec
    CPU time for SCF      4.03 sec, wall time      2.41 sec
converged SCF energy = -115.635128345586
SCF Done after  2.4138 seconds
after SCF memory used: 50.14453125 MB


******** <class 'pyscf.tdscf.rks.TDA'> for <class 'pyscf.df.df_jk.density_fit.<locals>.DensityFitting'> ********
nstates = 3 singlet
wfnsym = None
conv_tol = 1e-09
eigh lindep = 1e-12
eigh level_shift = 0
eigh max_space = 50
eigh max_cycle = 100
chkfile = methanol_pbe0.chk
max_memory 4000 MB (current use 0 MB)


    CPU time for df vj and vk      0.13 sec, wall time      0.07 sec
davidson 0 3  |r|= 0.0761  e= [0.25803291 0.31765948 0.32788274]  max|de|= 0.328  lindep=    1
    CPU time for df vj and vk      0.14 sec, wall time      0.07 sec
davidson 1 6  |r|= 0.0204  e= [0.25612253 0.31640234 0.32405214]  max|de|= -0.00383  lindep= 0.858
    CPU time for df vj and vk      0.13 sec, wall time      0.07 sec
davidson 2 9  |r|= 0.00869  e= [0.25604477 0.31633221 0.32341685]  max|de|= -0.000635  lindep= 0.863
    CPU time for df vj and vk      0.13 sec, wall time      0.06 sec
davidson 3 12  |r|= 0.00287  e= [0.2560425  0.31632974 0.32334264]  max|de|= -7.42e-05  lindep= 0.799
    CPU time for df vj and vk      0.13 sec, wall time      0.07 sec
davidson 4 15  |r|= 0.00151  e= [0.25604235 0.31632958 0.32332966]  max|de|= -1.3e-05  lindep= 0.755
    CPU time for df vj and vk      0.14 sec, wall time      0.07 sec
davidson 5 18  |r|= 0.000658  e= [0.25604234 0.31632955 0.32332672]  max|de|= -2.94e-06  lindep= 0.728
    CPU time for df vj and vk      0.13 sec, wall time      0.07 sec
root 0 converged  |r|= 4.54e-07  e= 0.2560423442449655  max|de|= -2.13e-11
davidson 6 21  |r|= 0.000322  e= [0.25604234 0.31632954 0.32332603]  max|de|= -6.92e-07  lindep= 0.837
    CPU time for df vj and vk      0.09 sec, wall time      0.05 sec
root 1 converged  |r|= 3.39e-06  e= 0.3163295398064459  max|de|= -2.55e-10
davidson 7 23  |r|= 9.25e-05  e= [0.25604234 0.31632954 0.32332594]  max|de|= -8.71e-08  lindep=  0.8
    CPU time for df vj and vk      0.05 sec, wall time      0.02 sec
davidson 8 24  |r|= 3.33e-05  e= [0.25604234 0.31632954 0.32332593]  max|de|= -9.72e-09  lindep= 0.866
    CPU time for df vj and vk      0.05 sec, wall time      0.03 sec
davidson 9 25  |r|= 1.6e-05  e= [0.25604234 0.31632954 0.32332593]  max|de|= -1.34e-09  lindep=  0.8
    CPU time for df vj and vk      0.05 sec, wall time      0.03 sec
root 2 converged  |r|= 6.54e-06  e= 0.3233259327038958  max|de|= -3.77e-10
converged 10 26  |r|= 6.54e-06  e= [0.25604234 0.31632954 0.32332593]  max|de|= -3.77e-10
    CPU time for TDA     24.40 sec, wall time     13.53 sec
Excited State energies (eV)
[6.96726707 8.60776522 8.79814677]
X.shape (9, 77)
e.shape  z.shape
3 <class 'numpy.ndarray'>
Traceback (most recent call last):
  File "PySCF_grad.py", line 143, in <module>
    tdg = td.Gradients(cphf_max_cycle=40)
  File "/Users/zehaozhou/repo/project/pyscf/pyscf/lib/misc.py", line 772, in fn
    return cls(obj, *args, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'cphf_max_cycle'
